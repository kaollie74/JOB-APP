openapi: 3.0.0
info:
  title: Jobs API
  contact: { }
  version: '1.0'
servers:
  - url: https://jobs-api-99.herokuapp.com/api/v1
    variables: { }
  - url: http://localhost:3000/api/v1
  variables: { }
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: RegisterUser
      parameters: [ ]
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
            example:
              name: NAYANA
              email: nayana@email.com
              password: icecream
        required: true
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security: [ ]
  /auth/login:
    post:
      tags:
        - Auth
      summary: LOGIN USER
      operationId: LOGINUSER
      parameters: [ ]
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LOGINUSERREQUEST'
            example:
              email: nayana@email.com
              password: icecream
        required: true
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security: [ ]
  /jobs:
    get:
      tags:
        - Jobs
      summary: Get All JOBS
      operationId: GetAllJOBS
      parameters: [ ]
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security:
        - bearer: [ ]
    post:
      tags:
        - Jobs
      summary: Create Job
      operationId: CreateJob
      parameters: [ ]
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
            example:
              company: accenture
              position: Solution Architect
        required: true
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security:
        - bearer: [ ]
  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get Job
      operationId: GetJob
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: 62bb99328e2dbb96485ec485
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security:
        - bearer: [ ]
    patch:
      tags:
        - Jobs
      summary: UPDATE Job
      operationId: UPDATEJob
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: 62bb981e8e2dbb96485ec47f
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UPDATEJobRequest'
            example:
              company: random
              position: full stack developer
        required: true
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security:
        - bearer: [ ]
    delete:
      tags:
        - Jobs
      summary: DELETE Jobs
      operationId: DELETEJobs
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: 62bb981e8e2dbb96485ec47f
      responses:
        '200':
          description: ''
          headers: { }
      deprecated: false
      security:
        - bearer: [ ]
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: NAYANA
        email: nayana@email.com
        password: icecream
    LOGINUSERREQUEST:
      title: LOGINUSERREQUEST
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: nayana@email.com
        password: icecream
    CreateJobRequest:
      title: CreateJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: accenture
        position: Solution Architect
    UPDATEJobRequest:
      title: UPDATEJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: random
        position: full stack developer
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: [ ]
tags:
  - name: Auth
    description: ''
  - name: Jobs
    description: ''